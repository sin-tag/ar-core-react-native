// automatically generated by the FlatBuffers compiler, do not modify

package com.google.ar.sceneform.lullmodel;

import java.nio.*;

import java.util.*;
import com.google.flatbuffers.*;

@SuppressWarnings("unused")
/**
 * Information about a renderable model.
 */
public final class ModelPipelineRenderableDef extends Table {
  public static ModelPipelineRenderableDef getRootAsModelPipelineRenderableDef(ByteBuffer _bb) { return getRootAsModelPipelineRenderableDef(_bb, new ModelPipelineRenderableDef()); }
  public static ModelPipelineRenderableDef getRootAsModelPipelineRenderableDef(ByteBuffer _bb, ModelPipelineRenderableDef obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { bb_pos = _i; bb = _bb; vtable_start = bb_pos - bb.getInt(bb_pos); vtable_size = bb.getShort(vtable_start); }
  public ModelPipelineRenderableDef __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /**
   * The name of ModelPipelineImportDef defining this model.
   */
  public String source() { int o = __offset(4); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer sourceAsByteBuffer() { return __vector_as_bytebuffer(4, 1); }
  public ByteBuffer sourceInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 4, 1); }
  /**
   * The material properties for the model. Each index in the array corresponds
   * to a submesh in the model.
   */
  public ModelPipelineMaterialDef materials(int j) { return materials(new ModelPipelineMaterialDef(), j); }
  public ModelPipelineMaterialDef materials(ModelPipelineMaterialDef obj, int j) { int o = __offset(6); return o != 0 ? obj.__assign(__indirect(__vector(o) + j * 4), bb) : null; }
  public int materialsLength() { int o = __offset(6); return o != 0 ? __vector_len(o) : 0; }
  /**
   * Specific vertex attributes to export. For multiple attributes with the
   * same usage (eg. two uv-coords for textures), simply list the attribute
   * twice, regardless of order.
   */
  public int attributes(int j) { int o = __offset(8); return o != 0 ? bb.getInt(__vector(o) + j * 4) : 0; }
  public int attributesLength() { int o = __offset(8); return o != 0 ? __vector_len(o) : 0; }
  public ByteBuffer attributesAsByteBuffer() { return __vector_as_bytebuffer(8, 4); }
  public ByteBuffer attributesInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 8, 4); }

  public static int createModelPipelineRenderableDef(FlatBufferBuilder builder,
      int sourceOffset,
      int materialsOffset,
      int attributesOffset) {
    builder.startObject(3);
    ModelPipelineRenderableDef.addAttributes(builder, attributesOffset);
    ModelPipelineRenderableDef.addMaterials(builder, materialsOffset);
    ModelPipelineRenderableDef.addSource(builder, sourceOffset);
    return ModelPipelineRenderableDef.endModelPipelineRenderableDef(builder);
  }

  public static void startModelPipelineRenderableDef(FlatBufferBuilder builder) { builder.startObject(3); }
  public static void addSource(FlatBufferBuilder builder, int sourceOffset) { builder.addOffset(0, sourceOffset, 0); }
  public static void addMaterials(FlatBufferBuilder builder, int materialsOffset) { builder.addOffset(1, materialsOffset, 0); }
  public static int createMaterialsVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startMaterialsVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addAttributes(FlatBufferBuilder builder, int attributesOffset) { builder.addOffset(2, attributesOffset, 0); }
  public static int createAttributesVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addInt(data[i]); return builder.endVector(); }
  public static void startAttributesVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static int endModelPipelineRenderableDef(FlatBufferBuilder builder) {
    int o = builder.endObject();
    return o;
  }
}

