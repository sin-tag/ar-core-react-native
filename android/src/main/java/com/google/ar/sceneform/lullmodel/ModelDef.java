// automatically generated by the FlatBuffers compiler, do not modify

package com.google.ar.sceneform.lullmodel;

import java.nio.*;

import java.util.*;
import com.google.flatbuffers.*;

@SuppressWarnings("unused")
/**
 * Contains all the information stored in a lullmodel file. This information
 * will be used to initialize various Systems from the same asset file. For
 * example, the skeleton data will be used by the RigSystem, while the vertex
 * data will be used by the RenderSystem.
 */
public final class ModelDef extends Table {
  public static ModelDef getRootAsModelDef(ByteBuffer _bb) { return getRootAsModelDef(_bb, new ModelDef()); }
  public static ModelDef getRootAsModelDef(ByteBuffer _bb, ModelDef obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { bb_pos = _i; bb = _bb; vtable_start = bb_pos - bb.getInt(bb_pos); vtable_size = bb.getShort(vtable_start); }
  public ModelDef __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /**
   * Version number to help decide how to interpret the flatbuffer data.
   */
  public int version() { int o = __offset(4); return o != 0 ? bb.getInt(o + bb_pos) : 1; }
  /**
   * Model data for different LODs.
   */
  public ModelInstanceDef lods(int j) { return lods(new ModelInstanceDef(), j); }
  public ModelInstanceDef lods(ModelInstanceDef obj, int j) { int o = __offset(6); return o != 0 ? obj.__assign(__indirect(__vector(o) + j * 4), bb) : null; }
  public int lodsLength() { int o = __offset(6); return o != 0 ? __vector_len(o) : 0; }
  /**
   * The skeletal information used by the RigSystem to support skinned
   * animations.
   */
  public SkeletonDef skeleton() { return skeleton(new SkeletonDef()); }
  public SkeletonDef skeleton(SkeletonDef obj) { int o = __offset(8); return o != 0 ? obj.__assign(__indirect(o + bb_pos), bb) : null; }
  /**
   * The minimum and maximum bounds contained in the vertex data.
   */
  public AabbDef boundingBox() { return boundingBox(new AabbDef()); }
  public AabbDef boundingBox(AabbDef obj) { int o = __offset(10); return o != 0 ? obj.__assign(o + bb_pos, bb) : null; }
  /**
   * A collection of embedded textures associated with this model.
   */
  public TextureDef textures(int j) { return textures(new TextureDef(), j); }
  public TextureDef textures(TextureDef obj, int j) { int o = __offset(12); return o != 0 ? obj.__assign(__indirect(__vector(o) + j * 4), bb) : null; }
  public int texturesLength() { int o = __offset(12); return o != 0 ? __vector_len(o) : 0; }

  public static void startModelDef(FlatBufferBuilder builder) { builder.startObject(5); }
  public static void addVersion(FlatBufferBuilder builder, int version) { builder.addInt(0, version, 1); }
  public static void addLods(FlatBufferBuilder builder, int lodsOffset) { builder.addOffset(1, lodsOffset, 0); }
  public static int createLodsVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startLodsVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addSkeleton(FlatBufferBuilder builder, int skeletonOffset) { builder.addOffset(2, skeletonOffset, 0); }
  public static void addBoundingBox(FlatBufferBuilder builder, int boundingBoxOffset) { builder.addStruct(3, boundingBoxOffset, 0); }
  public static void addTextures(FlatBufferBuilder builder, int texturesOffset) { builder.addOffset(4, texturesOffset, 0); }
  public static int createTexturesVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startTexturesVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static int endModelDef(FlatBufferBuilder builder) {
    int o = builder.endObject();
    return o;
  }
  public static void finishModelDefBuffer(FlatBufferBuilder builder, int offset) { builder.finish(offset); }
  public static void finishSizePrefixedModelDefBuffer(FlatBufferBuilder builder, int offset) { builder.finishSizePrefixed(offset); }
}

