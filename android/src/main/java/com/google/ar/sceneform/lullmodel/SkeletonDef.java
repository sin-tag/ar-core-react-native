// automatically generated by the FlatBuffers compiler, do not modify

package com.google.ar.sceneform.lullmodel;

import java.nio.*;

import java.util.*;
import com.google.flatbuffers.*;

@SuppressWarnings("unused")
/**
 * Describes the skeleton used by the RigSystem to handle skinned animations.
 */
public final class SkeletonDef extends Table {
  public static SkeletonDef getRootAsSkeletonDef(ByteBuffer _bb) { return getRootAsSkeletonDef(_bb, new SkeletonDef()); }
  public static SkeletonDef getRootAsSkeletonDef(ByteBuffer _bb, SkeletonDef obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { bb_pos = _i; bb = _bb; vtable_start = bb_pos - bb.getInt(bb_pos); vtable_size = bb.getShort(vtable_start); }
  public SkeletonDef __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /**
   * The names of each bone in the skeleton. Each bone in the skeleton can
   * be uniquely identified by an index into this array.
   */
  public String boneNames(int j) { int o = __offset(4); return o != 0 ? __string(__vector(o) + j * 4) : null; }
  public int boneNamesLength() { int o = __offset(4); return o != 0 ? __vector_len(o) : 0; }
  /**
   * Effectively a map of a bone to its parent bone.
   */
  public int boneParents(int j) { int o = __offset(6); return o != 0 ? bb.get(__vector(o) + j * 1) & 0xFF : 0; }
  public int boneParentsLength() { int o = __offset(6); return o != 0 ? __vector_len(o) : 0; }
  public ByteBuffer boneParentsAsByteBuffer() { return __vector_as_bytebuffer(6, 1); }
  public ByteBuffer boneParentsInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 6, 1); }
  /**
   * For information on how the matrices below are used for skinning, see
   * RigSystem::UpdateShaderTransforms().
   * The "inverse bind matrices" for each bone. Transforms from mesh space to
   * bone space so that skinning may be applied.
   */
  public Mat4x3 boneTransforms(int j) { return boneTransforms(new Mat4x3(), j); }
  public Mat4x3 boneTransforms(Mat4x3 obj, int j) { int o = __offset(8); return o != 0 ? obj.__assign(__vector(o) + j * 48, bb) : null; }
  public int boneTransformsLength() { int o = __offset(8); return o != 0 ? __vector_len(o) : 0; }

  public static int createSkeletonDef(FlatBufferBuilder builder,
      int bone_namesOffset,
      int bone_parentsOffset,
      int bone_transformsOffset) {
    builder.startObject(5);
    SkeletonDef.addBoneTransforms(builder, bone_transformsOffset);
    SkeletonDef.addBoneParents(builder, bone_parentsOffset);
    SkeletonDef.addBoneNames(builder, bone_namesOffset);
    return SkeletonDef.endSkeletonDef(builder);
  }

  public static void startSkeletonDef(FlatBufferBuilder builder) { builder.startObject(5); }
  public static void addBoneNames(FlatBufferBuilder builder, int boneNamesOffset) { builder.addOffset(0, boneNamesOffset, 0); }
  public static int createBoneNamesVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startBoneNamesVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addBoneParents(FlatBufferBuilder builder, int boneParentsOffset) { builder.addOffset(1, boneParentsOffset, 0); }
  public static int createBoneParentsVector(FlatBufferBuilder builder, byte[] data) { return builder.createByteVector(data); }
  public static int createBoneParentsVector(FlatBufferBuilder builder, ByteBuffer data) { return builder.createByteVector(data); }
  public static void startBoneParentsVector(FlatBufferBuilder builder, int numElems) { builder.startVector(1, numElems, 1); }
  public static void addBoneTransforms(FlatBufferBuilder builder, int boneTransformsOffset) { builder.addOffset(2, boneTransformsOffset, 0); }
  public static void startBoneTransformsVector(FlatBufferBuilder builder, int numElems) { builder.startVector(48, numElems, 4); }
  public static int endSkeletonDef(FlatBufferBuilder builder) {
    int o = builder.endObject();
    return o;
  }
}

