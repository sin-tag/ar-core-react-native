// automatically generated by the FlatBuffers compiler, do not modify

package com.google.ar.sceneform.lullmodel;

import java.nio.*;

import java.util.*;
import com.google.flatbuffers.*;

@SuppressWarnings("unused")
public final class TextureDef extends Table {
  public static TextureDef getRootAsTextureDef(ByteBuffer _bb) { return getRootAsTextureDef(_bb, new TextureDef()); }
  public static TextureDef getRootAsTextureDef(ByteBuffer _bb, TextureDef obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { bb_pos = _i; bb = _bb; vtable_start = bb_pos - bb.getInt(bb_pos); vtable_size = bb.getShort(vtable_start); }
  public TextureDef __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public String name() { int o = __offset(4); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer nameAsByteBuffer() { return __vector_as_bytebuffer(4, 1); }
  public ByteBuffer nameInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 4, 1); }
  public String file() { int o = __offset(6); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer fileAsByteBuffer() { return __vector_as_bytebuffer(6, 1); }
  public ByteBuffer fileInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 6, 1); }
  public int data(int j) { int o = __offset(8); return o != 0 ? bb.get(__vector(o) + j * 1) & 0xFF : 0; }
  public int dataLength() { int o = __offset(8); return o != 0 ? __vector_len(o) : 0; }
  public ByteBuffer dataAsByteBuffer() { return __vector_as_bytebuffer(8, 1); }
  public ByteBuffer dataInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 8, 1); }
  public boolean generateMipmaps() { int o = __offset(10); return o != 0 ? 0!=bb.get(o + bb_pos) : false; }
  public boolean premultiplyAlpha() { int o = __offset(12); return o != 0 ? 0!=bb.get(o + bb_pos) : false; }
  public int minFilter() { int o = __offset(14); return o != 0 ? bb.getShort(o + bb_pos) & 0xFFFF : 4; }
  public int magFilter() { int o = __offset(16); return o != 0 ? bb.getShort(o + bb_pos) & 0xFFFF : 1; }
  public int wrapS() { int o = __offset(18); return o != 0 ? bb.getShort(o + bb_pos) & 0xFFFF : 4; }
  public int wrapT() { int o = __offset(20); return o != 0 ? bb.getShort(o + bb_pos) & 0xFFFF : 4; }
  public int wrapR() { int o = __offset(22); return o != 0 ? bb.getShort(o + bb_pos) & 0xFFFF : 4; }
  public int targetType() { int o = __offset(24); return o != 0 ? bb.getShort(o + bb_pos) & 0xFFFF : 0; }
  public boolean isRgbm() { int o = __offset(26); return o != 0 ? 0!=bb.get(o + bb_pos) : false; }

  public static int createTextureDef(FlatBufferBuilder builder,
      int nameOffset,
      int fileOffset,
      int dataOffset,
      boolean generate_mipmaps,
      boolean premultiply_alpha,
      int min_filter,
      int mag_filter,
      int wrap_s,
      int wrap_t,
      int wrap_r,
      int target_type,
      boolean is_rgbm) {
    builder.startObject(12);
    TextureDef.addData(builder, dataOffset);
    TextureDef.addFile(builder, fileOffset);
    TextureDef.addName(builder, nameOffset);
    TextureDef.addTargetType(builder, target_type);
    TextureDef.addWrapR(builder, wrap_r);
    TextureDef.addWrapT(builder, wrap_t);
    TextureDef.addWrapS(builder, wrap_s);
    TextureDef.addMagFilter(builder, mag_filter);
    TextureDef.addMinFilter(builder, min_filter);
    TextureDef.addIsRgbm(builder, is_rgbm);
    TextureDef.addPremultiplyAlpha(builder, premultiply_alpha);
    TextureDef.addGenerateMipmaps(builder, generate_mipmaps);
    return TextureDef.endTextureDef(builder);
  }

  public static void startTextureDef(FlatBufferBuilder builder) { builder.startObject(12); }
  public static void addName(FlatBufferBuilder builder, int nameOffset) { builder.addOffset(0, nameOffset, 0); }
  public static void addFile(FlatBufferBuilder builder, int fileOffset) { builder.addOffset(1, fileOffset, 0); }
  public static void addData(FlatBufferBuilder builder, int dataOffset) { builder.addOffset(2, dataOffset, 0); }
  public static int createDataVector(FlatBufferBuilder builder, byte[] data) { return builder.createByteVector(data); }
  public static int createDataVector(FlatBufferBuilder builder, ByteBuffer data) { return builder.createByteVector(data); }
  public static void startDataVector(FlatBufferBuilder builder, int numElems) { builder.startVector(1, numElems, 1); }
  public static void addGenerateMipmaps(FlatBufferBuilder builder, boolean generateMipmaps) { builder.addBoolean(3, generateMipmaps, false); }
  public static void addPremultiplyAlpha(FlatBufferBuilder builder, boolean premultiplyAlpha) { builder.addBoolean(4, premultiplyAlpha, false); }
  public static void addMinFilter(FlatBufferBuilder builder, int minFilter) { builder.addShort(5, (short)minFilter, (short)4); }
  public static void addMagFilter(FlatBufferBuilder builder, int magFilter) { builder.addShort(6, (short)magFilter, (short)1); }
  public static void addWrapS(FlatBufferBuilder builder, int wrapS) { builder.addShort(7, (short)wrapS, (short)4); }
  public static void addWrapT(FlatBufferBuilder builder, int wrapT) { builder.addShort(8, (short)wrapT, (short)4); }
  public static void addWrapR(FlatBufferBuilder builder, int wrapR) { builder.addShort(9, (short)wrapR, (short)4); }
  public static void addTargetType(FlatBufferBuilder builder, int targetType) { builder.addShort(10, (short)targetType, (short)0); }
  public static void addIsRgbm(FlatBufferBuilder builder, boolean isRgbm) { builder.addBoolean(11, isRgbm, false); }
  public static int endTextureDef(FlatBufferBuilder builder) {
    int o = builder.endObject();
    return o;
  }
}

